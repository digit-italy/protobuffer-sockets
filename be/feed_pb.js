// source: feed.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.feed.feed_event', null, global);
goog.exportSymbol('proto.feed.feed_event.EventTypeCase', null, global);
goog.exportSymbol('proto.feed.security_order_depth_elem', null, global);
goog.exportSymbol('proto.feed.security_ref_price', null, global);
goog.exportSymbol('proto.feed.security_status', null, global);
goog.exportSymbol('proto.feed.security_trade', null, global);
goog.exportSymbol('proto.feed.security_volume', null, global);
goog.exportSymbol('proto.feed.service_status', null, global);
goog.exportSymbol('proto.feed.side_enum', null, global);
goog.exportSymbol('proto.feed.svc_status', null, global);
goog.exportSymbol('proto.feed.trading_status_enum', null, global);
goog.exportSymbol('proto.feed.update_payload', null, global);
goog.exportSymbol('proto.feed.update_snapshot', null, global);
goog.exportSymbol('proto.feed.update_ticker', null, global);
goog.exportSymbol('proto.feed.update_type', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feed.security_trade = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feed.security_trade, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feed.security_trade.displayName = 'proto.feed.security_trade';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feed.security_order_depth_elem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feed.security_order_depth_elem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feed.security_order_depth_elem.displayName = 'proto.feed.security_order_depth_elem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feed.security_ref_price = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feed.security_ref_price, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feed.security_ref_price.displayName = 'proto.feed.security_ref_price';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feed.security_status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feed.security_status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feed.security_status.displayName = 'proto.feed.security_status';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feed.security_volume = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feed.security_volume, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feed.security_volume.displayName = 'proto.feed.security_volume';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feed.update_payload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feed.update_payload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feed.update_payload.displayName = 'proto.feed.update_payload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feed.update_snapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feed.update_snapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feed.update_snapshot.displayName = 'proto.feed.update_snapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feed.update_ticker = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feed.update_ticker, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feed.update_ticker.displayName = 'proto.feed.update_ticker';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feed.service_status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.feed.service_status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feed.service_status.displayName = 'proto.feed.service_status';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.feed.feed_event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.feed.feed_event.oneofGroups_);
};
goog.inherits(proto.feed.feed_event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.feed.feed_event.displayName = 'proto.feed.feed_event';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feed.security_trade.prototype.toObject = function(opt_includeInstance) {
  return proto.feed.security_trade.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feed.security_trade} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feed.security_trade.toObject = function(includeInstance, msg) {
  var f, obj = {
    uniqueId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    price: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    size: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    crossOrderFlag: (f = jspb.Message.getBooleanField(msg, 4)) == null ? undefined : f,
    tradeTs: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feed.security_trade}
 */
proto.feed.security_trade.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feed.security_trade;
  return proto.feed.security_trade.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feed.security_trade} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feed.security_trade}
 */
proto.feed.security_trade.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUniqueId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSize(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCrossOrderFlag(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradeTs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feed.security_trade.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feed.security_trade.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feed.security_trade} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feed.security_trade.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional uint64 unique_id = 1;
 * @return {number}
 */
proto.feed.security_trade.prototype.getUniqueId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.feed.security_trade} returns this
 */
proto.feed.security_trade.prototype.setUniqueId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feed.security_trade} returns this
 */
proto.feed.security_trade.prototype.clearUniqueId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.security_trade.prototype.hasUniqueId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required double price = 2;
 * @return {number}
 */
proto.feed.security_trade.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.feed.security_trade} returns this
 */
proto.feed.security_trade.prototype.setPrice = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feed.security_trade} returns this
 */
proto.feed.security_trade.prototype.clearPrice = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.security_trade.prototype.hasPrice = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double size = 3;
 * @return {number}
 */
proto.feed.security_trade.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.feed.security_trade} returns this
 */
proto.feed.security_trade.prototype.setSize = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feed.security_trade} returns this
 */
proto.feed.security_trade.prototype.clearSize = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.security_trade.prototype.hasSize = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool cross_order_flag = 4;
 * @return {boolean}
 */
proto.feed.security_trade.prototype.getCrossOrderFlag = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.feed.security_trade} returns this
 */
proto.feed.security_trade.prototype.setCrossOrderFlag = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feed.security_trade} returns this
 */
proto.feed.security_trade.prototype.clearCrossOrderFlag = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.security_trade.prototype.hasCrossOrderFlag = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string trade_ts = 5;
 * @return {string}
 */
proto.feed.security_trade.prototype.getTradeTs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.feed.security_trade} returns this
 */
proto.feed.security_trade.prototype.setTradeTs = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feed.security_trade} returns this
 */
proto.feed.security_trade.prototype.clearTradeTs = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.security_trade.prototype.hasTradeTs = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feed.security_order_depth_elem.prototype.toObject = function(opt_includeInstance) {
  return proto.feed.security_order_depth_elem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feed.security_order_depth_elem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feed.security_order_depth_elem.toObject = function(includeInstance, msg) {
  var f, obj = {
    side: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    level: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    price: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    displaySize: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    userCode: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feed.security_order_depth_elem}
 */
proto.feed.security_order_depth_elem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feed.security_order_depth_elem;
  return proto.feed.security_order_depth_elem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feed.security_order_depth_elem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feed.security_order_depth_elem}
 */
proto.feed.security_order_depth_elem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.feed.side_enum} */ (reader.readEnum());
      msg.setSide(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLevel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDisplaySize(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feed.security_order_depth_elem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feed.security_order_depth_elem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feed.security_order_depth_elem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feed.security_order_depth_elem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.feed.side_enum} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * required side_enum side = 1;
 * @return {!proto.feed.side_enum}
 */
proto.feed.security_order_depth_elem.prototype.getSide = function() {
  return /** @type {!proto.feed.side_enum} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.feed.side_enum} value
 * @return {!proto.feed.security_order_depth_elem} returns this
 */
proto.feed.security_order_depth_elem.prototype.setSide = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feed.security_order_depth_elem} returns this
 */
proto.feed.security_order_depth_elem.prototype.clearSide = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.security_order_depth_elem.prototype.hasSide = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 level = 2;
 * @return {number}
 */
proto.feed.security_order_depth_elem.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.feed.security_order_depth_elem} returns this
 */
proto.feed.security_order_depth_elem.prototype.setLevel = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feed.security_order_depth_elem} returns this
 */
proto.feed.security_order_depth_elem.prototype.clearLevel = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.security_order_depth_elem.prototype.hasLevel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double price = 3;
 * @return {number}
 */
proto.feed.security_order_depth_elem.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.feed.security_order_depth_elem} returns this
 */
proto.feed.security_order_depth_elem.prototype.setPrice = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feed.security_order_depth_elem} returns this
 */
proto.feed.security_order_depth_elem.prototype.clearPrice = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.security_order_depth_elem.prototype.hasPrice = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double display_size = 4;
 * @return {number}
 */
proto.feed.security_order_depth_elem.prototype.getDisplaySize = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.feed.security_order_depth_elem} returns this
 */
proto.feed.security_order_depth_elem.prototype.setDisplaySize = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feed.security_order_depth_elem} returns this
 */
proto.feed.security_order_depth_elem.prototype.clearDisplaySize = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.security_order_depth_elem.prototype.hasDisplaySize = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string user_code = 5;
 * @return {string}
 */
proto.feed.security_order_depth_elem.prototype.getUserCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.feed.security_order_depth_elem} returns this
 */
proto.feed.security_order_depth_elem.prototype.setUserCode = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feed.security_order_depth_elem} returns this
 */
proto.feed.security_order_depth_elem.prototype.clearUserCode = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.security_order_depth_elem.prototype.hasUserCode = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feed.security_ref_price.prototype.toObject = function(opt_includeInstance) {
  return proto.feed.security_ref_price.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feed.security_ref_price} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feed.security_ref_price.toObject = function(includeInstance, msg) {
  var f, obj = {
    referencePrice: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    dynamicPrice: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    referenceTs: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feed.security_ref_price}
 */
proto.feed.security_ref_price.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feed.security_ref_price;
  return proto.feed.security_ref_price.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feed.security_ref_price} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feed.security_ref_price}
 */
proto.feed.security_ref_price.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setReferencePrice(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDynamicPrice(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setReferenceTs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feed.security_ref_price.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feed.security_ref_price.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feed.security_ref_price} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feed.security_ref_price.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional double reference_price = 1;
 * @return {number}
 */
proto.feed.security_ref_price.prototype.getReferencePrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.feed.security_ref_price} returns this
 */
proto.feed.security_ref_price.prototype.setReferencePrice = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feed.security_ref_price} returns this
 */
proto.feed.security_ref_price.prototype.clearReferencePrice = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.security_ref_price.prototype.hasReferencePrice = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double dynamic_price = 2;
 * @return {number}
 */
proto.feed.security_ref_price.prototype.getDynamicPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.feed.security_ref_price} returns this
 */
proto.feed.security_ref_price.prototype.setDynamicPrice = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feed.security_ref_price} returns this
 */
proto.feed.security_ref_price.prototype.clearDynamicPrice = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.security_ref_price.prototype.hasDynamicPrice = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string reference_ts = 3;
 * @return {string}
 */
proto.feed.security_ref_price.prototype.getReferenceTs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.feed.security_ref_price} returns this
 */
proto.feed.security_ref_price.prototype.setReferenceTs = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feed.security_ref_price} returns this
 */
proto.feed.security_ref_price.prototype.clearReferenceTs = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.security_ref_price.prototype.hasReferenceTs = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feed.security_status.prototype.toObject = function(opt_includeInstance) {
  return proto.feed.security_status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feed.security_status} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feed.security_status.toObject = function(includeInstance, msg) {
  var f, obj = {
    tradingSessionId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    tradingStatus: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    reopenTime: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    statusTs: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feed.security_status}
 */
proto.feed.security_status.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feed.security_status;
  return proto.feed.security_status.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feed.security_status} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feed.security_status}
 */
proto.feed.security_status.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradingSessionId(value);
      break;
    case 2:
      var value = /** @type {!proto.feed.trading_status_enum} */ (reader.readEnum());
      msg.setTradingStatus(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setReopenTime(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatusTs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feed.security_status.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feed.security_status.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feed.security_status} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feed.security_status.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!proto.feed.trading_status_enum} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * required string trading_session_id = 1;
 * @return {string}
 */
proto.feed.security_status.prototype.getTradingSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feed.security_status} returns this
 */
proto.feed.security_status.prototype.setTradingSessionId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feed.security_status} returns this
 */
proto.feed.security_status.prototype.clearTradingSessionId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.security_status.prototype.hasTradingSessionId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional trading_status_enum trading_status = 2;
 * @return {!proto.feed.trading_status_enum}
 */
proto.feed.security_status.prototype.getTradingStatus = function() {
  return /** @type {!proto.feed.trading_status_enum} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/**
 * @param {!proto.feed.trading_status_enum} value
 * @return {!proto.feed.security_status} returns this
 */
proto.feed.security_status.prototype.setTradingStatus = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feed.security_status} returns this
 */
proto.feed.security_status.prototype.clearTradingStatus = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.security_status.prototype.hasTradingStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string reopen_time = 3;
 * @return {string}
 */
proto.feed.security_status.prototype.getReopenTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.feed.security_status} returns this
 */
proto.feed.security_status.prototype.setReopenTime = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feed.security_status} returns this
 */
proto.feed.security_status.prototype.clearReopenTime = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.security_status.prototype.hasReopenTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string status_ts = 4;
 * @return {string}
 */
proto.feed.security_status.prototype.getStatusTs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.feed.security_status} returns this
 */
proto.feed.security_status.prototype.setStatusTs = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feed.security_status} returns this
 */
proto.feed.security_status.prototype.clearStatusTs = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.security_status.prototype.hasStatusTs = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feed.security_volume.prototype.toObject = function(opt_includeInstance) {
  return proto.feed.security_volume.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feed.security_volume} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feed.security_volume.toObject = function(includeInstance, msg) {
  var f, obj = {
    cumulativeSize: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    cumulativeAmount: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    noExecutedTrades: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    averagePrice: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    volumeTs: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feed.security_volume}
 */
proto.feed.security_volume.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feed.security_volume;
  return proto.feed.security_volume.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feed.security_volume} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feed.security_volume}
 */
proto.feed.security_volume.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCumulativeSize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCumulativeAmount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNoExecutedTrades(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAveragePrice(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setVolumeTs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feed.security_volume.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feed.security_volume.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feed.security_volume} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feed.security_volume.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * required double cumulative_size = 1;
 * @return {number}
 */
proto.feed.security_volume.prototype.getCumulativeSize = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.feed.security_volume} returns this
 */
proto.feed.security_volume.prototype.setCumulativeSize = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feed.security_volume} returns this
 */
proto.feed.security_volume.prototype.clearCumulativeSize = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.security_volume.prototype.hasCumulativeSize = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double cumulative_amount = 2;
 * @return {number}
 */
proto.feed.security_volume.prototype.getCumulativeAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.feed.security_volume} returns this
 */
proto.feed.security_volume.prototype.setCumulativeAmount = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feed.security_volume} returns this
 */
proto.feed.security_volume.prototype.clearCumulativeAmount = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.security_volume.prototype.hasCumulativeAmount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 no_executed_trades = 3;
 * @return {number}
 */
proto.feed.security_volume.prototype.getNoExecutedTrades = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.feed.security_volume} returns this
 */
proto.feed.security_volume.prototype.setNoExecutedTrades = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feed.security_volume} returns this
 */
proto.feed.security_volume.prototype.clearNoExecutedTrades = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.security_volume.prototype.hasNoExecutedTrades = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double average_price = 4;
 * @return {number}
 */
proto.feed.security_volume.prototype.getAveragePrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.feed.security_volume} returns this
 */
proto.feed.security_volume.prototype.setAveragePrice = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feed.security_volume} returns this
 */
proto.feed.security_volume.prototype.clearAveragePrice = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.security_volume.prototype.hasAveragePrice = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string volume_ts = 5;
 * @return {string}
 */
proto.feed.security_volume.prototype.getVolumeTs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.feed.security_volume} returns this
 */
proto.feed.security_volume.prototype.setVolumeTs = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feed.security_volume} returns this
 */
proto.feed.security_volume.prototype.clearVolumeTs = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.security_volume.prototype.hasVolumeTs = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feed.update_payload.prototype.toObject = function(opt_includeInstance) {
  return proto.feed.update_payload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feed.update_payload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feed.update_payload.toObject = function(includeInstance, msg) {
  var f, obj = {
    order: (f = msg.getOrder()) && proto.feed.security_order_depth_elem.toObject(includeInstance, f),
    trade: (f = msg.getTrade()) && proto.feed.security_trade.toObject(includeInstance, f),
    refPrice: (f = msg.getRefPrice()) && proto.feed.security_ref_price.toObject(includeInstance, f),
    status: (f = msg.getStatus()) && proto.feed.security_status.toObject(includeInstance, f),
    volume: (f = msg.getVolume()) && proto.feed.security_volume.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feed.update_payload}
 */
proto.feed.update_payload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feed.update_payload;
  return proto.feed.update_payload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feed.update_payload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feed.update_payload}
 */
proto.feed.update_payload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feed.security_order_depth_elem;
      reader.readMessage(value,proto.feed.security_order_depth_elem.deserializeBinaryFromReader);
      msg.setOrder(value);
      break;
    case 2:
      var value = new proto.feed.security_trade;
      reader.readMessage(value,proto.feed.security_trade.deserializeBinaryFromReader);
      msg.setTrade(value);
      break;
    case 3:
      var value = new proto.feed.security_ref_price;
      reader.readMessage(value,proto.feed.security_ref_price.deserializeBinaryFromReader);
      msg.setRefPrice(value);
      break;
    case 4:
      var value = new proto.feed.security_status;
      reader.readMessage(value,proto.feed.security_status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 5:
      var value = new proto.feed.security_volume;
      reader.readMessage(value,proto.feed.security_volume.deserializeBinaryFromReader);
      msg.setVolume(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feed.update_payload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feed.update_payload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feed.update_payload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feed.update_payload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrder();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.feed.security_order_depth_elem.serializeBinaryToWriter
    );
  }
  f = message.getTrade();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.feed.security_trade.serializeBinaryToWriter
    );
  }
  f = message.getRefPrice();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.feed.security_ref_price.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.feed.security_status.serializeBinaryToWriter
    );
  }
  f = message.getVolume();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.feed.security_volume.serializeBinaryToWriter
    );
  }
};


/**
 * optional security_order_depth_elem order = 1;
 * @return {?proto.feed.security_order_depth_elem}
 */
proto.feed.update_payload.prototype.getOrder = function() {
  return /** @type{?proto.feed.security_order_depth_elem} */ (
    jspb.Message.getWrapperField(this, proto.feed.security_order_depth_elem, 1));
};


/**
 * @param {?proto.feed.security_order_depth_elem|undefined} value
 * @return {!proto.feed.update_payload} returns this
*/
proto.feed.update_payload.prototype.setOrder = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feed.update_payload} returns this
 */
proto.feed.update_payload.prototype.clearOrder = function() {
  return this.setOrder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.update_payload.prototype.hasOrder = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional security_trade trade = 2;
 * @return {?proto.feed.security_trade}
 */
proto.feed.update_payload.prototype.getTrade = function() {
  return /** @type{?proto.feed.security_trade} */ (
    jspb.Message.getWrapperField(this, proto.feed.security_trade, 2));
};


/**
 * @param {?proto.feed.security_trade|undefined} value
 * @return {!proto.feed.update_payload} returns this
*/
proto.feed.update_payload.prototype.setTrade = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feed.update_payload} returns this
 */
proto.feed.update_payload.prototype.clearTrade = function() {
  return this.setTrade(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.update_payload.prototype.hasTrade = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional security_ref_price ref_price = 3;
 * @return {?proto.feed.security_ref_price}
 */
proto.feed.update_payload.prototype.getRefPrice = function() {
  return /** @type{?proto.feed.security_ref_price} */ (
    jspb.Message.getWrapperField(this, proto.feed.security_ref_price, 3));
};


/**
 * @param {?proto.feed.security_ref_price|undefined} value
 * @return {!proto.feed.update_payload} returns this
*/
proto.feed.update_payload.prototype.setRefPrice = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feed.update_payload} returns this
 */
proto.feed.update_payload.prototype.clearRefPrice = function() {
  return this.setRefPrice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.update_payload.prototype.hasRefPrice = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional security_status status = 4;
 * @return {?proto.feed.security_status}
 */
proto.feed.update_payload.prototype.getStatus = function() {
  return /** @type{?proto.feed.security_status} */ (
    jspb.Message.getWrapperField(this, proto.feed.security_status, 4));
};


/**
 * @param {?proto.feed.security_status|undefined} value
 * @return {!proto.feed.update_payload} returns this
*/
proto.feed.update_payload.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feed.update_payload} returns this
 */
proto.feed.update_payload.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.update_payload.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional security_volume volume = 5;
 * @return {?proto.feed.security_volume}
 */
proto.feed.update_payload.prototype.getVolume = function() {
  return /** @type{?proto.feed.security_volume} */ (
    jspb.Message.getWrapperField(this, proto.feed.security_volume, 5));
};


/**
 * @param {?proto.feed.security_volume|undefined} value
 * @return {!proto.feed.update_payload} returns this
*/
proto.feed.update_payload.prototype.setVolume = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feed.update_payload} returns this
 */
proto.feed.update_payload.prototype.clearVolume = function() {
  return this.setVolume(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.update_payload.prototype.hasVolume = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feed.update_snapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.feed.update_snapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feed.update_snapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feed.update_snapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    updateType: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    service: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    key: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    sigmas: (f = msg.getSigmas()) && proto.feed.update_payload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feed.update_snapshot}
 */
proto.feed.update_snapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feed.update_snapshot;
  return proto.feed.update_snapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feed.update_snapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feed.update_snapshot}
 */
proto.feed.update_snapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.feed.update_type} */ (reader.readEnum());
      msg.setUpdateType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setService(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 4:
      var value = new proto.feed.update_payload;
      reader.readMessage(value,proto.feed.update_payload.deserializeBinaryFromReader);
      msg.setSigmas(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feed.update_snapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feed.update_snapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feed.update_snapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feed.update_snapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.feed.update_type} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSigmas();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.feed.update_payload.serializeBinaryToWriter
    );
  }
};


/**
 * optional update_type update_type = 1;
 * @return {!proto.feed.update_type}
 */
proto.feed.update_snapshot.prototype.getUpdateType = function() {
  return /** @type {!proto.feed.update_type} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {!proto.feed.update_type} value
 * @return {!proto.feed.update_snapshot} returns this
 */
proto.feed.update_snapshot.prototype.setUpdateType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feed.update_snapshot} returns this
 */
proto.feed.update_snapshot.prototype.clearUpdateType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.update_snapshot.prototype.hasUpdateType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string service = 2;
 * @return {string}
 */
proto.feed.update_snapshot.prototype.getService = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.feed.update_snapshot} returns this
 */
proto.feed.update_snapshot.prototype.setService = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feed.update_snapshot} returns this
 */
proto.feed.update_snapshot.prototype.clearService = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.update_snapshot.prototype.hasService = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string key = 3;
 * @return {string}
 */
proto.feed.update_snapshot.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.feed.update_snapshot} returns this
 */
proto.feed.update_snapshot.prototype.setKey = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feed.update_snapshot} returns this
 */
proto.feed.update_snapshot.prototype.clearKey = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.update_snapshot.prototype.hasKey = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional update_payload sigmas = 4;
 * @return {?proto.feed.update_payload}
 */
proto.feed.update_snapshot.prototype.getSigmas = function() {
  return /** @type{?proto.feed.update_payload} */ (
    jspb.Message.getWrapperField(this, proto.feed.update_payload, 4));
};


/**
 * @param {?proto.feed.update_payload|undefined} value
 * @return {!proto.feed.update_snapshot} returns this
*/
proto.feed.update_snapshot.prototype.setSigmas = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feed.update_snapshot} returns this
 */
proto.feed.update_snapshot.prototype.clearSigmas = function() {
  return this.setSigmas(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.update_snapshot.prototype.hasSigmas = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feed.update_ticker.prototype.toObject = function(opt_includeInstance) {
  return proto.feed.update_ticker.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feed.update_ticker} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feed.update_ticker.toObject = function(includeInstance, msg) {
  var f, obj = {
    subscriptionId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    updateType: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    service: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    sequence: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    key: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    sigmas: (f = msg.getSigmas()) && proto.feed.update_payload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feed.update_ticker}
 */
proto.feed.update_ticker.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feed.update_ticker;
  return proto.feed.update_ticker.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feed.update_ticker} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feed.update_ticker}
 */
proto.feed.update_ticker.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSubscriptionId(value);
      break;
    case 2:
      var value = /** @type {!proto.feed.update_type} */ (reader.readEnum());
      msg.setUpdateType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setService(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSequence(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 6:
      var value = new proto.feed.update_payload;
      reader.readMessage(value,proto.feed.update_payload.deserializeBinaryFromReader);
      msg.setSigmas(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feed.update_ticker.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feed.update_ticker.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feed.update_ticker} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feed.update_ticker.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {!proto.feed.update_type} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSigmas();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.feed.update_payload.serializeBinaryToWriter
    );
  }
};


/**
 * required uint64 subscription_id = 1;
 * @return {number}
 */
proto.feed.update_ticker.prototype.getSubscriptionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.feed.update_ticker} returns this
 */
proto.feed.update_ticker.prototype.setSubscriptionId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feed.update_ticker} returns this
 */
proto.feed.update_ticker.prototype.clearSubscriptionId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.update_ticker.prototype.hasSubscriptionId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required update_type update_type = 2;
 * @return {!proto.feed.update_type}
 */
proto.feed.update_ticker.prototype.getUpdateType = function() {
  return /** @type {!proto.feed.update_type} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/**
 * @param {!proto.feed.update_type} value
 * @return {!proto.feed.update_ticker} returns this
 */
proto.feed.update_ticker.prototype.setUpdateType = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feed.update_ticker} returns this
 */
proto.feed.update_ticker.prototype.clearUpdateType = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.update_ticker.prototype.hasUpdateType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string service = 3;
 * @return {string}
 */
proto.feed.update_ticker.prototype.getService = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.feed.update_ticker} returns this
 */
proto.feed.update_ticker.prototype.setService = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feed.update_ticker} returns this
 */
proto.feed.update_ticker.prototype.clearService = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.update_ticker.prototype.hasService = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int64 sequence = 4;
 * @return {number}
 */
proto.feed.update_ticker.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.feed.update_ticker} returns this
 */
proto.feed.update_ticker.prototype.setSequence = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feed.update_ticker} returns this
 */
proto.feed.update_ticker.prototype.clearSequence = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.update_ticker.prototype.hasSequence = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required string key = 5;
 * @return {string}
 */
proto.feed.update_ticker.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.feed.update_ticker} returns this
 */
proto.feed.update_ticker.prototype.setKey = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feed.update_ticker} returns this
 */
proto.feed.update_ticker.prototype.clearKey = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.update_ticker.prototype.hasKey = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional update_payload sigmas = 6;
 * @return {?proto.feed.update_payload}
 */
proto.feed.update_ticker.prototype.getSigmas = function() {
  return /** @type{?proto.feed.update_payload} */ (
    jspb.Message.getWrapperField(this, proto.feed.update_payload, 6));
};


/**
 * @param {?proto.feed.update_payload|undefined} value
 * @return {!proto.feed.update_ticker} returns this
*/
proto.feed.update_ticker.prototype.setSigmas = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feed.update_ticker} returns this
 */
proto.feed.update_ticker.prototype.clearSigmas = function() {
  return this.setSigmas(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.update_ticker.prototype.hasSigmas = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feed.service_status.prototype.toObject = function(opt_includeInstance) {
  return proto.feed.service_status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feed.service_status} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feed.service_status.toObject = function(includeInstance, msg) {
  var f, obj = {
    service: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    status: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    details: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feed.service_status}
 */
proto.feed.service_status.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feed.service_status;
  return proto.feed.service_status.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feed.service_status} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feed.service_status}
 */
proto.feed.service_status.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setService(value);
      break;
    case 2:
      var value = /** @type {!proto.feed.svc_status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feed.service_status.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feed.service_status.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feed.service_status} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feed.service_status.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!proto.feed.svc_status} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * required string service = 1;
 * @return {string}
 */
proto.feed.service_status.prototype.getService = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.feed.service_status} returns this
 */
proto.feed.service_status.prototype.setService = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feed.service_status} returns this
 */
proto.feed.service_status.prototype.clearService = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.service_status.prototype.hasService = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required svc_status status = 2;
 * @return {!proto.feed.svc_status}
 */
proto.feed.service_status.prototype.getStatus = function() {
  return /** @type {!proto.feed.svc_status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.feed.svc_status} value
 * @return {!proto.feed.service_status} returns this
 */
proto.feed.service_status.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feed.service_status} returns this
 */
proto.feed.service_status.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.service_status.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string details = 3;
 * @return {string}
 */
proto.feed.service_status.prototype.getDetails = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.feed.service_status} returns this
 */
proto.feed.service_status.prototype.setDetails = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.feed.service_status} returns this
 */
proto.feed.service_status.prototype.clearDetails = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.service_status.prototype.hasDetails = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.feed.feed_event.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.feed.feed_event.EventTypeCase = {
  EVENT_TYPE_NOT_SET: 0,
  SNAPSHOT: 1,
  TICKER: 2,
  STATUS: 3
};

/**
 * @return {proto.feed.feed_event.EventTypeCase}
 */
proto.feed.feed_event.prototype.getEventTypeCase = function() {
  return /** @type {proto.feed.feed_event.EventTypeCase} */(jspb.Message.computeOneofCase(this, proto.feed.feed_event.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.feed.feed_event.prototype.toObject = function(opt_includeInstance) {
  return proto.feed.feed_event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.feed.feed_event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feed.feed_event.toObject = function(includeInstance, msg) {
  var f, obj = {
    snapshot: (f = msg.getSnapshot()) && proto.feed.update_snapshot.toObject(includeInstance, f),
    ticker: (f = msg.getTicker()) && proto.feed.update_ticker.toObject(includeInstance, f),
    status: (f = msg.getStatus()) && proto.feed.service_status.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.feed.feed_event}
 */
proto.feed.feed_event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.feed.feed_event;
  return proto.feed.feed_event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.feed.feed_event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.feed.feed_event}
 */
proto.feed.feed_event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.feed.update_snapshot;
      reader.readMessage(value,proto.feed.update_snapshot.deserializeBinaryFromReader);
      msg.setSnapshot(value);
      break;
    case 2:
      var value = new proto.feed.update_ticker;
      reader.readMessage(value,proto.feed.update_ticker.deserializeBinaryFromReader);
      msg.setTicker(value);
      break;
    case 3:
      var value = new proto.feed.service_status;
      reader.readMessage(value,proto.feed.service_status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.feed.feed_event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.feed.feed_event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.feed.feed_event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.feed.feed_event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSnapshot();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.feed.update_snapshot.serializeBinaryToWriter
    );
  }
  f = message.getTicker();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.feed.update_ticker.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.feed.service_status.serializeBinaryToWriter
    );
  }
};


/**
 * optional update_snapshot snapshot = 1;
 * @return {?proto.feed.update_snapshot}
 */
proto.feed.feed_event.prototype.getSnapshot = function() {
  return /** @type{?proto.feed.update_snapshot} */ (
    jspb.Message.getWrapperField(this, proto.feed.update_snapshot, 1));
};


/**
 * @param {?proto.feed.update_snapshot|undefined} value
 * @return {!proto.feed.feed_event} returns this
*/
proto.feed.feed_event.prototype.setSnapshot = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.feed.feed_event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feed.feed_event} returns this
 */
proto.feed.feed_event.prototype.clearSnapshot = function() {
  return this.setSnapshot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.feed_event.prototype.hasSnapshot = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional update_ticker ticker = 2;
 * @return {?proto.feed.update_ticker}
 */
proto.feed.feed_event.prototype.getTicker = function() {
  return /** @type{?proto.feed.update_ticker} */ (
    jspb.Message.getWrapperField(this, proto.feed.update_ticker, 2));
};


/**
 * @param {?proto.feed.update_ticker|undefined} value
 * @return {!proto.feed.feed_event} returns this
*/
proto.feed.feed_event.prototype.setTicker = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.feed.feed_event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feed.feed_event} returns this
 */
proto.feed.feed_event.prototype.clearTicker = function() {
  return this.setTicker(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.feed_event.prototype.hasTicker = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional service_status status = 3;
 * @return {?proto.feed.service_status}
 */
proto.feed.feed_event.prototype.getStatus = function() {
  return /** @type{?proto.feed.service_status} */ (
    jspb.Message.getWrapperField(this, proto.feed.service_status, 3));
};


/**
 * @param {?proto.feed.service_status|undefined} value
 * @return {!proto.feed.feed_event} returns this
*/
proto.feed.feed_event.prototype.setStatus = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.feed.feed_event.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.feed.feed_event} returns this
 */
proto.feed.feed_event.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.feed.feed_event.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * @enum {number}
 */
proto.feed.side_enum = {
  NONE: 0,
  BUY: 1,
  SELL: 2
};

/**
 * @enum {number}
 */
proto.feed.update_type = {
  SNAPSHOT: 1,
  VARIATIONS: 2
};

/**
 * @enum {number}
 */
proto.feed.svc_status = {
  ONLINE: 0,
  OFFLINE: 1,
  BROKEN: 2
};

/**
 * @enum {number}
 */
proto.feed.trading_status_enum = {
  OPEN_DELAY: 1,
  TRAD_HALT: 2,
  RESUME: 3,
  NO_OPEN: 4,
  PRICE_INDICATION: 5,
  TRAD_RNG_IND: 6,
  MKT_IMB_BUY: 7,
  MKT_IMB_SELL: 8,
  MOC_IMB_BUY: 9,
  MOC_IMB_SELL: 10,
  NOT_ASSIGNED: 11,
  NO_MKT_IMB: 12,
  NO_MOC_IMB: 13,
  ITS_PRE_OP: 14,
  NEW_PRICE_IND: 15,
  TRAD_DISS_TIME: 16,
  TRADING: 17,
  TRADING_HALT: 18,
  NOT_TRADED: 19,
  UNKNOWN: 20,
  SUSPENDED: 99
};

goog.object.extend(exports, proto.feed);
